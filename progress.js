// ÌïôÏäµ ÏßÑÎèÑ Í¥ÄÎ¶¨ ÏãúÏä§ÌÖú

class ProgressManager {
    constructor() {
        this.data = this.loadProgressData();
        this.startTime = Date.now();
        this.todayKey = new Date().toDateString();
        this.initializeProgress();
    }

    // ÏßÑÎèÑ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    loadProgressData() {
        const defaultData = {
            totalTime: 0,
            totalQuestions: 0,
            correctAnswers: 0,
            highScore: 0,
            maxStreak: 0,
            currentStreak: 0,
            lastAccessed: new Date().toISOString(),
            topicStats: {
                covalent: { attempted: 0, correct: 0, timeSpent: 0 },
                ionic: { attempted: 0, correct: 0, timeSpent: 0 },
                molecular: { attempted: 0, correct: 0, timeSpent: 0 },
                bonding: { attempted: 0, correct: 0, timeSpent: 0 },
                reactions: { attempted: 0, correct: 0, timeSpent: 0 },
                dailyChemistry: { attempted: 0, correct: 0, timeSpent: 0 }
            },
            dailyActivity: {},
            achievements: [],
            recentAnswers: []
        };

        const saved = localStorage.getItem('chemistryProgress');
        return saved ? { ...defaultData, ...JSON.parse(saved) } : defaultData;
    }

    // ÏßÑÎèÑ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
    saveProgressData() {
        this.data.lastAccessed = new Date().toISOString();
        localStorage.setItem('chemistryProgress', JSON.stringify(this.data));
    }

    // ÏßÑÎèÑ ÌéòÏù¥ÏßÄ Ï¥àÍ∏∞Ìôî
    initializeProgress() {
        this.updateOverviewStats();
        this.updateTopicProgress();
        this.updateActivityChart();
        this.updateAchievements();
        this.updateRecommendations();
    }

    // Ï¢ÖÌï© ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
    updateOverviewStats() {
        // Ï¥ù ÌïôÏäµ ÏãúÍ∞Ñ
        document.getElementById('total-time').textContent = `${Math.floor(this.data.totalTime / 60)}Î∂Ñ`;
        
        // Ïò§Îäò ÌïôÏäµ ÏãúÍ∞Ñ
        const todayTime = this.data.dailyActivity[this.todayKey]?.time || 0;
        document.getElementById('today-time').textContent = `${Math.floor(todayTime / 60)}Î∂Ñ`;

        // Ï¥ù Î¨∏Ï†ú Ïàò
        document.getElementById('total-questions').textContent = `${this.data.totalQuestions}Î¨∏Ï†ú`;
        
        // Ïò§Îäò Î¨∏Ï†ú Ïàò
        const todayQuestions = this.data.dailyActivity[this.todayKey]?.questions || 0;
        document.getElementById('today-questions').textContent = `${todayQuestions}Î¨∏Ï†ú`;

        // Ï†ÑÏ≤¥ Ï†ïÎãµÎ•†
        const overallAccuracy = this.data.totalQuestions > 0 ? 
            Math.round((this.data.correctAnswers / this.data.totalQuestions) * 100) : 0;
        document.getElementById('accuracy').textContent = `${overallAccuracy}%`;

        // ÏµúÍ∑º 10Î¨∏Ï†ú Ï†ïÎãµÎ•†
        const recentAccuracy = this.calculateRecentAccuracy();
        document.getElementById('recent-accuracy').textContent = `${recentAccuracy}%`;

        // ÏµúÍ≥† Ï†êÏàò
        document.getElementById('high-score').textContent = `${this.data.highScore}Ï†ê`;

        // ÏµúÎåÄ Ïó∞ÏÜç Ï†ïÎãµ
        document.getElementById('max-streak').textContent = `${this.data.maxStreak}Í∞ú`;
    }

    // ÏµúÍ∑º Ï†ïÎãµÎ•† Í≥ÑÏÇ∞
    calculateRecentAccuracy() {
        if (this.data.recentAnswers.length === 0) return 0;
        const recentCorrect = this.data.recentAnswers.slice(-10).filter(answer => answer.correct).length;
        const recentTotal = Math.min(this.data.recentAnswers.length, 10);
        return Math.round((recentCorrect / recentTotal) * 100);
    }

    // Ï£ºÏ†úÎ≥Ñ ÏßÑÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
    updateTopicProgress() {
        const container = document.getElementById('topic-progress-detail');
        const topicNames = {
            covalent: 'üîó Í≥µÏú†Í≤∞Ìï©',
            ionic: '‚ö° Ïù¥Ïò®ÌôîÌï©Î¨º',
            molecular: 'üß¨ Î∂ÑÏûê Íµ¨Ï°∞',
            bonding: 'üí™ Í≤∞Ìï©Ïùò ÏÑ∏Í∏∞',
            reactions: '‚öóÔ∏è ÌôîÌïô Î∞òÏùë',
            dailyChemistry: 'üè† ÏùºÏÉÅ ÏÜç ÌôîÌïô'
        };

        let html = '';
        for (const [topic, stats] of Object.entries(this.data.topicStats)) {
            const accuracy = stats.attempted > 0 ? Math.round((stats.correct / stats.attempted) * 100) : 0;
            const progress = Math.min((stats.attempted / 15) * 100, 100); // 15Î¨∏Ï†úÎ•º 100%Î°ú Í∞ÄÏ†ï
            
            html += `
                <div class="topic-item">
                    <div class="topic-header">
                        <span class="topic-name">${topicNames[topic] || topic}</span>
                        <div class="topic-stats">
                            <span>Ï†ïÎãµÎ•†: ${accuracy}%</span>
                            <span>Î¨∏Ï†ú Ïàò: ${stats.attempted}</span>
                            <span>ÏãúÍ∞Ñ: ${Math.floor(stats.timeSpent / 60)}Î∂Ñ</span>
                        </div>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${progress}%"></div>
                    </div>
                </div>
            `;
        }
        container.innerHTML = html;
    }

    // ÌôúÎèô Ï∞®Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏ (ÏµúÍ∑º 7Ïùº)
    updateActivityChart() {
        const container = document.getElementById('activity-chart');
        const days = [];
        const today = new Date();
        
        for (let i = 6; i >= 0; i--) {
            const date = new Date(today);
            date.setDate(date.getDate() - i);
            days.push(date);
        }

        const maxQuestions = Math.max(...days.map(date => {
            const dayKey = date.toDateString();
            return this.data.dailyActivity[dayKey]?.questions || 0;
        }), 1);

        let html = '<div class="chart-container">';
        days.forEach(date => {
            const dayKey = date.toDateString();
            const questions = this.data.dailyActivity[dayKey]?.questions || 0;
            const height = (questions / maxQuestions) * 100;
            const dayName = date.toLocaleDateString('ko-KR', { weekday: 'short' });
            
            html += `
                <div style="flex: 1; display: flex; flex-direction: column; align-items: center;">
                    <div class="chart-bar" style="height: ${height}%">
                        <div class="chart-value">${questions}</div>
                    </div>
                    <div class="chart-day">${dayName}</div>
                </div>
            `;
        });
        html += '</div>';
        container.innerHTML = html;
    }

    // ÏÑ±Ï∑® ÏãúÏä§ÌÖú ÏóÖÎç∞Ïù¥Ìä∏
    updateAchievements() {
        const container = document.getElementById('achievement-grid');
        const achievements = [
            {
                id: 'first_problem',
                name: 'Ï≤´ Í±∏Ïùå',
                description: 'Ï≤´ Î¨∏Ï†ú Ìï¥Í≤∞',
                icon: 'üéØ',
                condition: () => this.data.totalQuestions >= 1
            },
            {
                id: 'problem_solver',
                name: 'Î¨∏Ï†ú Ìï¥Í≤∞ÏÇ¨',
                description: '10Î¨∏Ï†ú Ìï¥Í≤∞',
                icon: 'üî•',
                condition: () => this.data.totalQuestions >= 10
            },
            {
                id: 'chemistry_master',
                name: 'ÌôîÌïô ÎßàÏä§ÌÑ∞',
                description: '50Î¨∏Ï†ú Ìï¥Í≤∞',
                icon: 'üß™',
                condition: () => this.data.totalQuestions >= 50
            },
            {
                id: 'accuracy_expert',
                name: 'Ï†ïÌôïÎèÑ Ï†ÑÎ¨∏Í∞Ä',
                description: 'Ï†ïÎãµÎ•† 80% Ïù¥ÏÉÅ',
                icon: 'üéñÔ∏è',
                condition: () => {
                    const accuracy = this.data.totalQuestions > 0 ? 
                        (this.data.correctAnswers / this.data.totalQuestions) * 100 : 0;
                    return accuracy >= 80 && this.data.totalQuestions >= 10;
                }
            },
            {
                id: 'streak_master',
                name: 'Ïó∞ÏÜç Ï†ïÎãµÏôï',
                description: '5Î¨∏Ï†ú Ïó∞ÏÜç Ï†ïÎãµ',
                icon: '‚ö°',
                condition: () => this.data.maxStreak >= 5
            },
            {
                id: 'daily_learner',
                name: 'Íæ∏Ï§ÄÌïú ÌïôÏäµÏûê',
                description: '7Ïùº Ïó∞ÏÜç ÌïôÏäµ',
                icon: 'üìö',
                condition: () => this.checkDailyStreak() >= 7
            },
            {
                id: 'time_master',
                name: 'ÏãúÍ∞Ñ Í¥ÄÎ¶¨Ïôï',
                description: 'Ï¥ù 60Î∂Ñ Ïù¥ÏÉÅ ÌïôÏäµ',
                icon: '‚è∞',
                condition: () => this.data.totalTime >= 3600 // 60Î∂Ñ = 3600Ï¥à
            },
            {
                id: 'topic_explorer',
                name: 'Ï£ºÏ†ú ÌÉêÌóòÍ∞Ä',
                description: 'Î™®Îì† Ï£ºÏ†ú ÌïôÏäµ',
                icon: 'üó∫Ô∏è',
                condition: () => {
                    return Object.values(this.data.topicStats).every(stat => stat.attempted > 0);
                }
            }
        ];

        let html = '';
        achievements.forEach(achievement => {
            const earned = achievement.condition();
            const className = earned ? 'achievement-badge earned' : 'achievement-badge';
            
            html += `
                <div class="${className}" title="${achievement.description}">
                    <div class="badge-icon">${achievement.icon}</div>
                    <div class="badge-name">${achievement.name}</div>
                    <div class="badge-description">${achievement.description}</div>
                </div>
            `;
        });
        
        container.innerHTML = html;
    }

    // ÏùºÏùº Ïó∞ÏÜç ÌïôÏäµ Ï≤¥ÌÅ¨
    checkDailyStreak() {
        const today = new Date();
        let streak = 0;
        
        for (let i = 0; i < 30; i++) { // ÏµúÎåÄ 30Ïùº Ï≤¥ÌÅ¨
            const date = new Date(today);
            date.setDate(date.getDate() - i);
            const dayKey = date.toDateString();
            
            if (this.data.dailyActivity[dayKey]?.questions > 0) {
                streak++;
            } else {
                break;
            }
        }
        
        return streak;
    }

    // ÌïôÏäµ Ï∂îÏ≤ú ÏóÖÎç∞Ïù¥Ìä∏
    updateRecommendations() {
        const container = document.getElementById('recommendations');
        const recommendations = [];

        // Ï†ïÎãµÎ•†Ïù¥ ÎÇÆÏùÄ Ï£ºÏ†ú Ï∂îÏ≤ú
        const weakTopics = Object.entries(this.data.topicStats)
            .filter(([topic, stats]) => stats.attempted > 0)
            .map(([topic, stats]) => ({
                topic,
                accuracy: (stats.correct / stats.attempted) * 100
            }))
            .filter(item => item.accuracy < 70)
            .sort((a, b) => a.accuracy - b.accuracy);

        if (weakTopics.length > 0) {
            const topicNames = {
                covalent: 'Í≥µÏú†Í≤∞Ìï©',
                ionic: 'Ïù¥Ïò®ÌôîÌï©Î¨º',
                molecular: 'Î∂ÑÏûê Íµ¨Ï°∞',
                bonding: 'Í≤∞Ìï©Ïùò ÏÑ∏Í∏∞',
                reactions: 'ÌôîÌïô Î∞òÏùë',
                dailyChemistry: 'ÏùºÏÉÅ ÏÜç ÌôîÌïô'
            };
            
            recommendations.push({
                title: `${topicNames[weakTopics[0].topic]} Î≥µÏäµÌïòÍ∏∞`,
                description: `Ï†ïÎãµÎ•†Ïù¥ ${Math.round(weakTopics[0].accuracy)}%Î°ú ÎÇÆÏäµÎãàÎã§. Ï∂îÍ∞Ä ÌïôÏäµÏùÑ Í∂åÏû•Ìï©ÎãàÎã§.`,
                action: () => this.goToTopic(weakTopics[0].topic)
            });
        }

        // Ïò§Îû´ÎèôÏïà ÌïôÏäµÌïòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞
        const lastActivity = new Date(this.data.lastAccessed);
        const daysSinceLastActivity = Math.floor((Date.now() - lastActivity.getTime()) / (1000 * 60 * 60 * 24));
        
        if (daysSinceLastActivity >= 3) {
            recommendations.push({
                title: 'ÌïôÏäµ Ïû¨Í∞úÌïòÍ∏∞',
                description: `${daysSinceLastActivity}Ïùº ÎèôÏïà ÌïôÏäµÌïòÏßÄ ÏïäÏïòÏäµÎãàÎã§. Îã§Ïãú ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî!`,
                action: () => switchSection('practice')
            });
        }

        // Í∏∞Î≥∏ Ï∂îÏ≤ú
        if (recommendations.length === 0) {
            recommendations.push({
                title: 'ÏÉàÎ°úÏö¥ Î¨∏Ï†ú ÎèÑÏ†ÑÌïòÍ∏∞',
                description: 'Îçî ÎßéÏùÄ Î¨∏Ï†úÎ•º ÌíÄÏñ¥ÏÑú Ïã§Î†•ÏùÑ Ìñ•ÏÉÅÏãúÏºúÎ≥¥ÏÑ∏Ïöî!',
                action: () => switchSection('practice')
            });
        }

        let html = '';
        recommendations.forEach(rec => {
            html += `
                <div class="recommendation-item">
                    <div class="recommendation-title">${rec.title}</div>
                    <div class="recommendation-description">${rec.description}</div>
                    <button class="recommendation-action" onclick="progressManager.executeRecommendation('${rec.title}')">
                        ÏãúÏûëÌïòÍ∏∞
                    </button>
                </div>
            `;
        });
        
        container.innerHTML = html;
        this.currentRecommendations = recommendations;
    }

    // Ï∂îÏ≤ú Ïã§Ìñâ
    executeRecommendation(title) {
        const recommendation = this.currentRecommendations.find(rec => rec.title === title);
        if (recommendation && recommendation.action) {
            recommendation.action();
        }
    }

    // Ï£ºÏ†úÎ°ú Ïù¥Îèô
    goToTopic(topic) {
        switchSection('learn');
        setTimeout(() => {
            showTopic(topic);
        }, 100);
    }

    // ÎãµÎ≥Ä Í∏∞Î°ù
    recordAnswer(isCorrect, topic, points = 10) {
        this.data.totalQuestions++;
        if (isCorrect) {
            this.data.correctAnswers++;
            this.data.currentStreak++;
            this.data.maxStreak = Math.max(this.data.maxStreak, this.data.currentStreak);
        } else {
            this.data.currentStreak = 0;
        }

        // Ï†êÏàò ÏóÖÎç∞Ïù¥Ìä∏
        if (isCorrect) {
            const newScore = this.data.correctAnswers * points;
            this.data.highScore = Math.max(this.data.highScore, newScore);
        }

        // Ï£ºÏ†úÎ≥Ñ ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
        if (topic && this.data.topicStats[topic]) {
            this.data.topicStats[topic].attempted++;
            if (isCorrect) {
                this.data.topicStats[topic].correct++;
            }
        }

        // ÏµúÍ∑º ÎãµÎ≥Ä Í∏∞Î°ù
        this.data.recentAnswers.push({
            correct: isCorrect,
            topic: topic,
            timestamp: Date.now()
        });
        
        // ÏµúÍ∑º 50Í∞úÎßå Ïú†ÏßÄ
        if (this.data.recentAnswers.length > 50) {
            this.data.recentAnswers.shift();
        }

        // ÏùºÏùº ÌôúÎèô Í∏∞Î°ù
        if (!this.data.dailyActivity[this.todayKey]) {
            this.data.dailyActivity[this.todayKey] = { questions: 0, time: 0 };
        }
        this.data.dailyActivity[this.todayKey].questions++;

        this.saveProgressData();
        
        // ÏßÑÎèÑ ÌéòÏù¥ÏßÄÍ∞Ä ÌôúÏÑ±ÌôîÎêòÏñ¥ ÏûàÏúºÎ©¥ ÏóÖÎç∞Ïù¥Ìä∏
        if (document.getElementById('progress').classList.contains('active')) {
            this.initializeProgress();
        }
    }

    // ÌïôÏäµ ÏãúÍ∞Ñ Í∏∞Î°ù
    recordStudyTime(seconds) {
        this.data.totalTime += seconds;
        
        if (!this.data.dailyActivity[this.todayKey]) {
            this.data.dailyActivity[this.todayKey] = { questions: 0, time: 0 };
        }
        this.data.dailyActivity[this.todayKey].time += seconds;
        
        this.saveProgressData();
    }
}

// ÏßÑÎèÑ ÎÇ¥Î≥¥ÎÇ¥Í∏∞
function exportProgress() {
    const progressData = progressManager.data;
    const exportData = {
        exported: new Date().toISOString(),
        stats: {
            totalTime: Math.floor(progressData.totalTime / 60),
            totalQuestions: progressData.totalQuestions,
            correctAnswers: progressData.correctAnswers,
            accuracy: progressData.totalQuestions > 0 ? 
                Math.round((progressData.correctAnswers / progressData.totalQuestions) * 100) : 0,
            maxStreak: progressData.maxStreak
        },
        topicStats: progressData.topicStats
    };
    
    const dataStr = JSON.stringify(exportData, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    
    const link = document.createElement('a');
    link.href = URL.createObjectURL(dataBlob);
    link.download = `chemistry_progress_${new Date().toISOString().split('T')[0]}.json`;
    link.click();
}

// ÌÜµÍ≥Ñ Ï¥àÍ∏∞Ìôî
function resetProgress() {
    if (confirm('Ï†ïÎßêÎ°ú Î™®Îì† ÌïôÏäµ ÌÜµÍ≥ÑÎ•º Ï¥àÍ∏∞ÌôîÌïòÏãúÍ≤†ÏäµÎãàÍπå? Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.')) {
        localStorage.removeItem('chemistryProgress');
        progressManager = new ProgressManager();
        alert('ÌïôÏäµ ÌÜµÍ≥ÑÍ∞Ä Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.');
    }
}

// Ï†ÑÏó≠ ÏßÑÎèÑ Í¥ÄÎ¶¨Ïûê Ï¥àÍ∏∞Ìôî
let progressManager;

// ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ï¥àÍ∏∞Ìôî
document.addEventListener('DOMContentLoaded', () => {
    progressManager = new ProgressManager();
    window.progressManager = progressManager; // Ï†ÑÏó≠ Ï†ëÍ∑º Í∞ÄÎä•ÌïòÎèÑÎ°ù ÏÑ§Ï†ï
    
    // 5Î∂ÑÎßàÎã§ ÌïôÏäµ ÏãúÍ∞Ñ Í∏∞Î°ù
    setInterval(() => {
        progressManager.recordStudyTime(300); // 5Î∂Ñ = 300Ï¥à
    }, 300000);
});